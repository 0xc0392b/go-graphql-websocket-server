#+TITLE:  GraphQL WebSocket server for Golang
#+AUTHOR: William Santos
#+EMAIL:  w@wsantos.net

#+LANGUAGE: en
#+STARTUP:  showall
#+OPTIONS:  toc:2

âœ¨ Golang server implementing the GraphQL over WebSocket protocol

* Features
- Supports queries, mutations, and subscriptions
- Tested with Apollo WebSocket client
- Built-in authentication mechanism
- Example projects for reference

* GraphQL schema
The [[https://github.com/graphql-go/graphql][graphql-go/graphql]] package is the required package for defining a
GraphQL schema. For example:

#+BEGIN_SRC go
  userResolver := func(p graphql.ResolveParams) (interface{}, error) {
	  return testUser{1, "test user", "test@user.com"}, nil
  }

  userType := graphql.NewObject(
	  graphql.ObjectConfig{
		  Name: "User",
		  Fields: graphql.Fields{
			  "id":    &graphql.Field{Type: graphql.Int},
			  "name":  &graphql.Field{Type: graphql.String},
			  "email": &graphql.Field{Type: graphql.String},
		  },
	  },
  )

  queryType := graphql.NewObject(
	  graphql.ObjectConfig{
		  Name: "Query",
		  Fields: graphql.Fields{
			  "getUser": &graphql.Field{
				  Type:        userType,
				  Resolve:     userResolver,
				  Description: "Get test user",
			  },
		  },
	  },
  )

  if schema, err := graphql.NewSchema(
	  graphql.SchemaConfig{
		  Query:        queryType,
	  },
  ); err != nil {
	  return nil, err
  } else {
	  return &schema, nil
  }
#+END_SRC

* The protocol
The protocol is defined in [[https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md][enisdenjo/graphql-ws]] and consists of the
following eight message types:

1) ConnectionInit (client -> server)
2) ConnectionAck (client <- server)
3) Ping (client <-> server)
4) Pong (client <-> server)
5) Subscribe (client -> server)
6) Next (client <- server)
7) Error (client <- server)
8) Complete (client <-> server)

* Authentication
...

* Example usage
...
